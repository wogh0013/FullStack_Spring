
new -> spring legacy project -> spring MVC ->  프로젝트명:hello 
-> com.mycompany.myapp 


1.
만든 회사가 다름 
1)메이븐 - 빌딩툴-xml형태 
2)gradule - 안드로이드, 스프링부트, JSON형태 

필요로하는 라이브러리를 다운 받아주고 프로젝트 통째로 번역해주고 관리해주는 역할을 하는 프로그램 

db연결시 mysl ~~~ .jar 복사해서 붙여넣었던거 필요로 하는 라이브러리 많은데 
예전에는 우리가 웹사이트에 가서 하나씩 다운받아  WEB-INF 아래에 lib 폴더가 있고 여기에 다 
붙여넣어야 했음(수십개가 되니까)

메이븐을 만든 사람들이 사람들이 너무 괴로워한다 사람들이 편하도록 
maven repository  를 만들고 여기에 사용자들이 원하는 라이브러리를 다 모아놓음 
그래서 pom.xml 파일에 필요로 하는 라이브러리를 적으면 다운을 받아준다. 

pom.xml 파일에는 필요로하는 라이브러리에 대한  xml형태의 태그값 저장하기 

메이븐 사이트 : https://mvnrepository.com/


<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>6.0.6</version>
</dependency>

프로젝트 - 마우스 오른쪽 - maven install  :  필요로하는 라이브러리를 다운받아준다 


프로젝트 가동시 첫번째 읽을 파일이 web.xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">


    <filter>
      <filter-name>CharacterEncodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <init-param>
         <param-name>encoding</param-name>
         <param-value>UTF-8</param-value>
      </init-param>
      <init-param>
         <param-name>forceEncoding</param-name>
         <param-value>true</param-value>
      </init-param>
   </filter>

   <filter-mapping>
      <filter-name>CharacterEncodingFilter</filter-name>
      <url-pattern>/*</url-pattern>
   </filter-mapping>
   
    <!-- root-context.xml 데이터베이스와 트랜잭션 처리를 여기서 꼭 여기서 -->

   <!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
   <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/spring/root-context.xml</param-value>
   </context-param>
   
   웹사이트에 어떤 상황이 생기면 이게 리스너를 계속 호출한다 
   <listener>
      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
   </listener>

   <!-- Processes application requests -->
   <servlet>
      <servlet-name>appServlet</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <init-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
      </init-param>
      <load-on-startup>1</load-on-startup>
   </servlet>
      
   <servlet-mapping>
      <servlet-name>appServlet</servlet-name>
      <url-pattern>/</url-pattern>
   </servlet-mapping>

</web-app>


DI(Dependency Injection)

web.xml파일에서 모든 요청을 DispatchServlet 이 받아라 

Controller -> Service -> Dao 

객체를 우리가 만들면 

class BoardController{

    BoardService service = new BoardService();
}

class BoardService {
    BoardDao dao = new BoardDao()
}

클라이언트가 컨트롤러를 요청하면 컨트롤러가 만들어고 다시 서비스가 만들어지고  다시 Dao가 만들어진다
클라이언트가 컨트롤러를 요청하면 컨트롤러가 만들어고 다시 서비스가 만들어지고  다시 Dao가 만들어진다
클라이언트가 컨트롤러를 요청하면 컨트롤러가 만들어고 다시 서비스가 만들어지고  다시 Dao가 만들어진다
클라이언트가 컨트롤러를 요청하면 컨트롤러가 만들어고 다시 서비스가 만들어지고  다시 Dao가 만들어진다
클라이언트가 컨트롤러를 요청하면 컨트롤러가 만들어고 다시 서비스가 만들어지고  다시 Dao가 만들어진다
클라이언트가 컨트롤러를 요청하면 컨트롤러가 만들어고 다시 서비스가 만들어지고  다시 Dao가 만들어진다

많은 클라이언트가 한번에 접속을 하면 메모리(자원)가 부족하다. 

컨트롤러 서비스 다오 세개의 클래스가 다 일을 하는애들이지 데이터가 아니다. 

택배보낼때 
    cu편의점 --- 택배기사가 자기구역의               ----------- 이동 -------- 택배기사가 
                 편의점을 돌면서 택배를 수거                                  자기구역에 배달


    cu편의점 --- 택배기사를 고용해서 해당편의점의   ----------- 이동 -------- 택배기사가 (고용,해고)
                택배수거시키고 나서 해고                     고용,해고       자기구역에 배달


    택배상자는 많은게 맞지만 일하는 사람은 두고 계속 일을 시키는게 효율적이다


    컨트롤러 1개 (일을 하는 클래스) - 데이터를 실어나르는 일만 한다
    서비스   1개 (일을 하는 클래스) - 데이터를 실어나르는 일만 한다
    다오     1개 (일을 하는 클래스) - 데이터를 실어나르는 일만 한다
    dto     데이터 - 택배박스 


개체를 하나만 만들고 싶다. 객체를 프레임워크가 만든다. 그래서 만들어서 역으로 주입을 시켜준다 

@Controller 
class BoardController {

    @Autowired   -- 스프링이 만들어놨던 객체를 클래스타입을 보고 자동으로 주입한다. 
    BoardService service; 
}

@Service
class BoardService {

    @Autowired
    BoardDao dao; 
}

@Repository 
class BoardDao{

}

xml파일에다가 객체만들라고 기술을 해야 한다.  -- 1.5미만은 이 방식을 사용 
자바 1.5가 나오면서 어노테이션이 나옴 
어노테이션이 자바 클래스 파일을 @Override 형태로 클래스를 중간에 끼워넣는 프로그램 기법을 개발 
어노테이션 쓰자 



@Controller 
class BoardController {
                                     --  jsp와 서비스를 연결하는 일 
                                     -- 일을 최소화, 가급적 일을 많이 안하는 구조이다  
    @Resource(name="boardService")   -- 스프링이 만들어놨던 객체를 클래스타입을 보고 자동으로 주입한다. 
    BoardService service; //인터페이스 
}

@Service("boardService") --  dao를 여러개 소유할 수 있다. 화면단위로 
class BoardService {               하나의  crud(create read update delete)
                                   테이블을 여러개 건드릴 수 있다 
    @Resource(name="boardDao")     트랜잭션처리 
    BoardDao dao;  //인터페이스 
}

@Repository("boardDao") -- 디비에 데이터 읽고 쓰기 전담(테이블당 하나)
class BoardDao{

}

특별히 요청사항이 없으면 싱글톤으로 객체를 만든다 .










